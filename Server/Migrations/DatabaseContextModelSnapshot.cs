// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Database;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoteTag", b =>
                {
                    b.Property<Guid>("NotesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("NotesGuid", "TagsGuid");

                    b.HasIndex("TagsGuid");

                    b.ToTable("NoteTag");
                });

            modelBuilder.Entity("Server.Core.Entities.Note", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("OAuthService")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserGuid");

                    b.ToTable("OAuths");
                });

            modelBuilder.Entity("Server.Core.Entities.Session", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OAuthGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("OAuthGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Server.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Server.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("13d49ee6-4663-41ec-a44b-e74b7a56c666"),
                            CreatedAt = new DateTime(2023, 10, 24, 19, 57, 10, 761, DateTimeKind.Utc).AddTicks(9444),
                            Login = "admin",
                            Password = "password",
                            Role = 1000,
                            UpdatedAt = new DateTime(2023, 10, 24, 19, 57, 10, 761, DateTimeKind.Utc).AddTicks(9446),
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("NoteTag", b =>
                {
                    b.HasOne("Server.Core.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Core.Entities.Note", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("OAuths")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.Session", b =>
                {
                    b.HasOne("Server.Core.Entities.OAuth", "OAuth")
                        .WithMany("Sessions")
                        .HasForeignKey("OAuthGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAuth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.Tag", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Server.Core.Entities.User", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("OAuths");

                    b.Navigation("Sessions");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
