// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Database;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231108222711_AddRestrictionsForFields")]
    partial class AddRestrictionsForFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Core.Entities.Note", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("OAuthService")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserGuid");

                    b.ToTable("OAuths");
                });

            modelBuilder.Entity("Server.Core.Entities.Session", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OAuthGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("OAuthGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Server.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Server.Core.Entities.TagNote", b =>
                {
                    b.Property<Guid>("NoteGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid");

                    b.HasKey("NoteGuid", "TagGuid");

                    b.HasIndex("TagGuid");

                    b.ToTable("TagNotes");
                });

            modelBuilder.Entity("Server.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Guid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("ba77e58c-0717-474d-b251-b1fd5246c2d2"),
                            CreatedAt = new DateTime(2023, 11, 8, 22, 27, 10, 983, DateTimeKind.Utc).AddTicks(5781),
                            Login = "admin",
                            Password = "password",
                            Role = 1000,
                            UpdatedAt = new DateTime(2023, 11, 8, 22, 27, 10, 983, DateTimeKind.Utc).AddTicks(5784),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.Note", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("OAuths")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.Session", b =>
                {
                    b.HasOne("Server.Core.Entities.OAuth", "OAuth")
                        .WithMany("Sessions")
                        .HasForeignKey("OAuthGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAuth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.Tag", b =>
                {
                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.TagNote", b =>
                {
                    b.HasOne("Server.Core.Entities.Note", "Note")
                        .WithMany("TagNotes")
                        .HasForeignKey("NoteGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.Tag", "Tag")
                        .WithMany("TagNotes")
                        .HasForeignKey("TagGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Server.Core.Entities.Note", b =>
                {
                    b.Navigation("TagNotes");
                });

            modelBuilder.Entity("Server.Core.Entities.OAuth", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Server.Core.Entities.Tag", b =>
                {
                    b.Navigation("TagNotes");
                });

            modelBuilder.Entity("Server.Core.Entities.User", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("OAuths");

                    b.Navigation("Sessions");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
